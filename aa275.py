# -*- coding: utf-8 -*-
"""AA275.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UWB7j_07Sf1CpuCmI4dCY6DDPKY2NQ-Z

# SETUP
"""

### BEGINNING IMPORTS ###

import os
import cv2
import numpy as np
import shutil
import json
import yaml
import glob
import torch
import torch.optim as optim
import matplotlib.pyplot as plt
from tqdm import tqdm
from matplotlib.patches import Rectangle

### GPU SETTINGS ###
from google.colab import drive
import os
import zipfile

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

if not os.path.exists("/content/drive/MyDrive"):
    drive.mount("/content/drive")
else:
    print("Drive mounted.")

dataset_path = "/content/drive/MyDrive/AA275FinalProject/models/Adverse Weather Detection"
print(os.listdir(dataset_path))

"""# RT-DETR"""

### RT-DETR ###
# Import statements

import locale
def getpreferredencoding(do_setlocale = True):
    return "UTF-8"
locale.getpreferredencoding = getpreferredencoding # fixed encoding issue

!pip install ultralytics opencv-python numpy matplotlib torch torchvision torchaudio
import torch
from ultralytics import RTDETR
torch.use_deterministic_algorithms(False)

### RT-DETR ###
# Trained Model

import torch
from ultralytics import RTDETR
torch.use_deterministic_algorithms(False)

model = RTDETR("rtdetr-l.pt")
model.info()

results = model.train(
    data="/content/drive/MyDrive/AA275FinalProject/models/Adverse Weather Detection/data.yaml",
    epochs=10,
    imgsz=640,
    batch=16,
    device="cuda",
    save=True,
    save_json=True
    )

### RT-DETR ###
model_rt = RTDETR("rtdetr-l.pt")
results_rt = model_rt("/content/drive/MyDrive/AA275FinalProject/models/Adverse Weather Detection/train/images/rain_storm-130_jpg.rf.ee883d499166c1a24655b43f5ff5cb72.jpg")
results_rt[0].show()

"""# YOLOv8"""

### YOLOv8 ###
# Import statements

import locale
def getpreferredencoding(do_setlocale = True):
    return "UTF-8"
locale.getpreferredencoding = getpreferredencoding # fixes encoding issue

!pip install ultralytics

### YOLOv8 ###
# Trained Model

import torch
from ultralytics import YOLO
torch.use_deterministic_algorithms(False)

model = YOLO("yolov8m.pt")
results_YOLO = model.train(
    data="/content/drive/MyDrive/AA275FinalProject/models/Adverse Weather Detection/data.yaml",
    epochs=10,
    imgsz=640,
    batch=16,
    device="cuda",
    save=True,
    save_json=True
)

### YOLOv8 ###
# Image print out with bounding boxes & confidence levels

# Re-initialize the YOLOv8 model
model_v8 = YOLO("yolov8m.pt")
results_YOLO = model_v8("/content/drive/MyDrive/AA275FinalProject/models/Adverse Weather Detection/train/images/rain_storm-130_jpg.rf.ee883d499166c1a24655b43f5ff5cb72.jpg")
results_YOLO[0].show()

"""# YOLOv11"""

### YOLOv11 ###

# Import statement

!pip install ultralytics

### YOLOv11 ###
# Model

import torch
from ultralytics import YOLO
torch.use_deterministic_algorithms(False)

model = YOLO("yolo11m.pt")

results_YOLO_11 = model.train(
    data="/content/drive/MyDrive/AA275FinalProject/models/Adverse Weather Detection/data.yaml",
    epochs=10,
    imgsz=640,
    batch=16,
    device="cuda",
    save=True,
    save_json=True
)

### YOLO11 ###

results_YOLO_11 = model("/content/drive/MyDrive/AA275FinalProject/models/Adverse Weather Detection/train/images/rain_storm-130_jpg.rf.ee883d499166c1a24655b43f5ff5cb72.jpg")
results_YOLO_11[0].show()

"""# WEATHER MODS"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import torch
from ultralytics import RTDETR, YOLO

torch.use_deterministic_algorithms(False)

image_path = "/content/drive/MyDrive/AA275FinalProject/models/Adverse Weather Detection/train/images/rain_storm-130_jpg.rf.ee883d499166c1a24655b43f5ff5cb72.jpg"
image = cv2.imread(image_path)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# WEATHER FUNCTIONS
def add_fog(image, fog_intensity=0.6):
    height, width, _ = image.shape
    fog_layer = np.full((height, width, 3), 255, dtype=np.uint8)
    return cv2.addWeighted(image, 1 - fog_intensity, fog_layer, fog_intensity, 0)

def add_snow(image, snow_intensity=300):
    height, width, _ = image.shape
    snow_image = image.copy()
    for _ in range(snow_intensity):
        x, y = np.random.randint(0, width), np.random.randint(0, height)
        radius = np.random.randint(1, 4)
        cv2.circle(snow_image, (x, y), radius, (255, 255, 255), -1)
    return snow_image

def add_rain(image, rain_intensity=200):
    height, width, _ = image.shape
    rain_image = image.copy()
    for _ in range(rain_intensity):
        x, y = np.random.randint(0, width), np.random.randint(0, height)
        length = np.random.randint(10, 20)
        thickness = np.random.randint(1, 2)
        cv2.line(rain_image, (x, y), (x, y + length), (200, 200, 200), thickness)
    return rain_image

def add_dust(image, dust_intensity=0.5):
    height, width, _ = image.shape
    dust_layer = np.full((height, width, 3), (200, 150, 100), dtype=np.uint8)
    return cv2.addWeighted(image, 1 - dust_intensity, dust_layer, dust_intensity, 0)

def add_smoke(image, smoke_intensity=0.4):
    height, width, _ = image.shape
    smoke_layer = np.full((height, width, 3), (180, 180, 180), dtype=np.uint8)
    return cv2.addWeighted(image, 1 - smoke_intensity, smoke_layer, smoke_intensity, 0)

# OUTPUT PATH & MODELS
output_path = "/content/weather.jpg"
cv2.imwrite(output_path, cv2.cvtColor(image, cv2.COLOR_RGB2BGR))
print(f"Image saved at: {output_path}")

model_v8 = YOLO("yolov8m.pt")
results_YOLO = model_v8(output_path)
img_yolo8 = results_YOLO[0].plot()

model_v11 = YOLO("yolo11m.pt")
results_YOLO_11 = model_v11(output_path)
img_yolo11 = results_YOLO_11[0].plot()

model_rt = RTDETR("rtdetr-l.pt")
results_rt = model_rt(output_path)
img_rt = results_rt[0].plot()

# WEATHER + MODELS
foggy_images = [add_fog(img_rt, 0.7), add_fog(img_yolo8, 0.7), add_fog(img_yolo11, 0.7)]
snowy_images = [add_snow(img_rt, 500), add_snow(img_yolo8, 500), add_snow(img_yolo11, 500)]
rainy_images = [add_rain(img_rt, 300), add_rain(img_yolo8, 300), add_rain(img_yolo11, 300)]
dusty_images = [add_dust(img_rt, 0.6), add_dust(img_yolo8, 0.6), add_dust(img_yolo11, 0.6)]
smoky_images = [add_smoke(img_rt, 0.5), add_smoke(img_yolo8, 0.5), add_smoke(img_yolo11, 0.5)]

def plot_weather_effects(images, titles):
    fig, axes = plt.subplots(1, 3, figsize=(15, 5))
    for ax, img, title in zip(axes, images, titles):
        ax.imshow(img)
        ax.axis("off")
        ax.set_title(title)
    plt.tight_layout()
    plt.show()

plot_weather_effects(foggy_images, ["Fog RT-DETR", "Fog YOLOv8", "Fog YOLOv11"])
plot_weather_effects(snowy_images, ["Snow RT-DETR", "Snow YOLOv8", "Snow YOLOv11"])
plot_weather_effects(rainy_images, ["Rain RT-DETR", "Rain YOLOv8", "Rain YOLOv11"])
plot_weather_effects(dusty_images, ["Dust RT-DETR", "Dust YOLOv8", "Dust YOLOv11"])
plot_weather_effects(smoky_images, ["Smoke RT-DETR", "Smoke YOLOv8", "Smoke YOLOv11"])

### HEAVIER SNOWSTORM VISUALIZATION ###

foggier_image = add_fog(image, fog_intensity=0.9)
snowier_foggier_image = add_snow(foggier_image, snow_intensity=700)

output_path = "/content/heavy_snowstorm_image.jpg"
cv2.imwrite(output_path, cv2.cvtColor(snowier_foggier_image, cv2.COLOR_RGB2BGR))
print(f"Image saved at: {output_path}")

model_rt = RTDETR("rtdetr-l.pt")
results_rt = model_rt(output_path)
img_rt = results_rt[0].plot()

model_v8 = YOLO("yolov8m.pt")
results_YOLO = model_v8(output_path)
img_yolo8 = results_YOLO[0].plot()

model_v11 = YOLO("yolo11m.pt")
results_YOLO_11 = model_v11(output_path)
img_yolo11 = results_YOLO_11[0].plot()

fig, axes = plt.subplots(2, 2, figsize=(12, 12))
axes[0, 0].imshow(snowier_foggier_image)
axes[0, 0].set_title("Original Image with Heavy Snowstorm")
axes[0, 0].axis("off")

axes[0, 1].imshow(img_rt)
axes[0, 1].set_title("RT-DETR Detection")
axes[0, 1].axis("off")

axes[1, 0].imshow(img_yolo8)
axes[1, 0].set_title("YOLOv8 Detection")
axes[1, 0].axis("off")

axes[1, 1].imshow(img_yolo11)
axes[1, 1].set_title("YOLOv11 Detection")
axes[1, 1].axis("off")

plt.tight_layout()
plt.show()

### DATASET METRICS ###

import pandas as pd

results_paths = {
    "RT-DETR": "/content/runs/detect/train/results.csv",
    "YOLOv8": "/content/runs/detect/train2/results.csv",
    "YOLOv11": "/content/runs/detect/train3/results.csv"
}


results = {}
for model, path in results_paths.items():
    try:
        df = pd.read_csv(path)
        results[model] = df
    except Exception as e:
        results[model] = None
comparison_table = {}

for model, df in results.items():
    if df is not None:
        try:
            precision_col = "metrics/precision(B)"
            recall_col = "metrics/recall(B)"
            map_col = "metrics/mAP50(B)"

            if all(col in df.columns for col in [precision_col, recall_col, map_col, "epoch"]):
                df["accuracy"] = 2 * (df[precision_col] * df[recall_col]) / (df[precision_col] + df[recall_col] + 1e-8)
                last_epoch = df.iloc[-1]
                comparison_table[model] = {
                    "Epoch": int(last_epoch["epoch"]),
                    "Precision": round(last_epoch[precision_col], 4),
                    "Recall": round(last_epoch[recall_col], 4),
                    "mAP@50": round(last_epoch[map_col], 4),
                    "Accuracy": round(last_epoch["accuracy"], 4)
                }
        except KeyError as e:
            print(f"Missing key {e} in {model}'s results.")
comparison_df = pd.DataFrame(comparison_table).T
print(comparison_df)

"""# Addtional"""

####
"""
All of this code is additional, just things I added on after the deadline, just for curiousity's sake.
I added the fog weather modification over all of the images in the dataset, to create a new dataset
to see what the metrics would be on a single weather condition

"""
### FOGGY WEATHER MODIFIED DATASET CREATOR ###

import cv2
import numpy as np
import matplotlib.pyplot as plt
import torch
import os
import random
import shutil
from tqdm import tqdm
from ultralytics import RTDETR, YOLO

torch.use_deterministic_algorithms(False)

def add_fog(image, fog_intensity=0.6):
    height, width, _ = image.shape
    fog_layer = np.full((height, width, 3), 255, dtype=np.uint8)
    return cv2.addWeighted(image, 1 - fog_intensity, fog_layer, fog_intensity, 0)

def apply_fog_to_dataset(dataset_path, output_path):
    for split in ["train", "test", "valid"]:
        input_img_dir = os.path.join(dataset_path, split, "images")
        input_lbl_dir = os.path.join(dataset_path, split, "labels")
        output_img_dir = os.path.join(output_path, split, "images")
        output_lbl_dir = os.path.join(output_path, split, "labels")

        os.makedirs(output_img_dir, exist_ok=True)
        os.makedirs(output_lbl_dir, exist_ok=True)

        image_files = [f for f in os.listdir(input_img_dir) if f.endswith(('.jpg', '.png', '.jpeg'))]

        for image_file in tqdm(image_files, total=len(image_files), desc=f"Applying fog to {split} set"):
            image_path = os.path.join(input_img_dir, image_file)
            label_path = os.path.join(input_lbl_dir, os.path.splitext(image_file)[0] + ".txt")

            image = cv2.imread(image_path)
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

            modified_image = add_fog(image)

            new_image_name = f"fog_{image_file}"
            output_image_path = os.path.join(output_img_dir, new_image_name)
            cv2.imwrite(output_image_path, cv2.cvtColor(modified_image, cv2.COLOR_RGB2BGR))

            if os.path.exists(label_path):
                new_label_name = os.path.splitext(new_image_name)[0] + ".txt"
                shutil.copy(label_path, os.path.join(output_lbl_dir, new_label_name))

    shutil.copy(os.path.join(dataset_path, "data.yaml"), output_path)
    print("Fog-augmented dataset created successfully!")

apply_fog_to_dataset("/content/drive/MyDrive/AA275FinalProject/models/Adverse Weather Detection", "/content/foggy_weather_dataset")

### FOGGY MODIFIED MODEL TRAINING ###

### RT-DETR ###
import torch
from ultralytics import RTDETR
torch.use_deterministic_algorithms(False)

model = RTDETR("rtdetr-l.pt")
model.info()

results = model.train(
    data="/content/foggy_weather_dataset/data.yaml",
    epochs=10,
    imgsz=640,
    batch=16,
    device="cuda",
    save=True,
    save_json=True
    )

### YOLOv8 ###
from ultralytics import YOLO
torch.use_deterministic_algorithms(False)

model = YOLO("yolov8m.pt")
results_YOLO = model.train(
    data="/content/foggy_weather_dataset/data.yaml",
    epochs=10,
    imgsz=640,
    batch=16,
    device="cuda",
    save=True,
    save_json=True
)


### YOLOv11 ###
torch.use_deterministic_algorithms(False)

model = YOLO("yolo11m.pt")

results_YOLO_11 = model.train(
    data="/content/foggy_weather_dataset/data.yaml",
    epochs=10,
    imgsz=640,
    batch=16,
    device="cuda",
    save=True,
    save_json=True
)

### FOGGY DATASET METRICS ###

import pandas as pd

results_paths = {
    "RT-DETR": "/content/runs/detect/train4/results.csv",
    "YOLOv8": "/content/runs/detect/train5/results.csv",
    "YOLOv11": "/content/runs/detect/train6/results.csv"
}


results = {}
for model, path in results_paths.items():
    try:
        df = pd.read_csv(path)
        results[model] = df
    except Exception as e:
        results[model] = None
comparison_table = {}

for model, df in results.items():
    if df is not None:
        try:
            precision_col = "metrics/precision(B)"
            recall_col = "metrics/recall(B)"
            map_col = "metrics/mAP50(B)"

            if all(col in df.columns for col in [precision_col, recall_col, map_col, "epoch"]):
                df["accuracy"] = 2 * (df[precision_col] * df[recall_col]) / (df[precision_col] + df[recall_col] + 1e-8)
                last_epoch = df.iloc[-1]
                comparison_table[model] = {
                    "Epoch": int(last_epoch["epoch"]),
                    "Precision": round(last_epoch[precision_col], 4),
                    "Recall": round(last_epoch[recall_col], 4),
                    "mAP@50": round(last_epoch[map_col], 4),
                    "Accuracy": round(last_epoch["accuracy"], 4)
                }
        except KeyError as e:
            print(f"Missing key {e} in {model}'s results.")
comparison_df = pd.DataFrame(comparison_table).T
print(comparison_df)